"""
cli.py

CLI mode source code.
"""

import os
from ConfigParser import RawConfigParser
import requests
import logging
import json

import common
import http


LOG = logging.getLogger("cli")


class Cli(object):
    """Runs the cli mode for this application."""

    def __init__(self, options):
        self.options = options
        self.supported_methods = [method.replace("_", "-")
                                  for method, _ in http.HttpApi.get_apis()]
        self.request_id = 0
        self.server_uri = ""
        self.server_config = {}
        self.load_from_server_config()

    def load_from_server_config(self):
        """Loads settings from config file generated by server.
        The config file path is read from an env variable.
        """
        config_dir_path = os.environ[common.CONFIG_DIR_ENV_VAR]
        config_file_name = os.path.join(
            config_dir_path,
            common.FLOW_LDAP_SERVER_CONFIG_FILE_NAME)
        cfg = RawConfigParser()
        cfg.read(config_file_name)
        self.server_config = common.raw_config_as_dict(cfg)[
            common.FLOW_LDAP_SERVER_CONFIG_SECTION]
        self.server_uri = self.server_config['uri']

    def run_method(self, method, args_dict):
        """Performs an JSON-RPC request to the server.
        Arguments:
        method : string, method name
        args_dict: dict, positional params
        """
        headers = {"content-type": "application/json"}
        payload = {
            "method": method,
            "params": args_dict,
            "id": self.request_id,
            "jsonrpc": "2.0",
        }
        LOG.info("request: %s", payload)
        response = requests.post(
            self.server_uri,
            data=json.dumps(payload),
            headers=headers).json()
        assert self.request_id == response["id"]
        self.request_id += 1
        LOG.info("response: %s", response)

    def run(self):
        """Cli command execution."""
        if self.options.api:
            api_name = self.options.api.replace("-", "_")
            args_list = http.HttpApi.get_api_args(api_name)
            args_dict = {key: getattr(self.options, key)
                         for key in args_list}
            self.run_method(self.options.api, args_dict)
